#!/usr/bin/env python3

import rospy
import rospkg
import numpy as np
import os
import sys
import tty
import termios
import math
import heapq

from time import sleep
from visualization_msgs.msg import Marker
from threading import Lock
from std_msgs.msg import String
from geometry_msgs.msg import Point
from nav_msgs.msg import Path
from geometry_msgs.msg import Twist
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import OccupancyGrid



class AStarSolver:
    """
    A node for solving the map using A* search
    """

    def __init__(self):
        """
        Initializes an instance of the node, all relevant subscribers and publishers, external methods will be the core of the A star features e.g Nodes, Parent-Child, Path and Heuristic[Based on simple euclidean distance if doesnt work i'll go with another distance metric e.g mahalabonis or something] 
        """

        
        # Initialize Variables
        self.robot_pos = None
        self.goal_pos = None
        self.robot_pose = None
        self.goal_pose = None
        self.map = None

        # Initialize Publishers
        #self.pub_move = rospy.Publisher('/move', String, queue_size=10)

        # Initialize Subscribers
        self.sub_goal_pos = rospy.Subscriber('/move_base_simple/goal', PoseStamped, self.cb_goal_pos)
        self.sub_robot_pos = rospy.Subscriber('/robot_pos', Point, self.cb_robot_pos)
        self.sub_map = rospy.Subscriber('/map', OccupancyGrid, self.cb_map)
        
        #Initialize Publishers
        self.pub_marker = rospy.Publisher("/visualization/goal", Marker, queue_size=100)
	
	
    def cb_goal_pos(self, msg):
        self.goal_pos = Point()
        self.goal_pos.x = math.floor(msg.pose.position.x)
        self.goal_pos.y = math.floor(msg.pose.position.y)
        #print(self.goal_pos.x)

    def cb_robot_pos(self, msg):
        self.robot_pos = msg
        #print(self.robot_pos.x)
    
    
    def cb_map(self, msg):
        self.map = np.transpose(np.asarray(msg.data, dtype=np.int8).reshape(msg.info.width, msg.info.height))
        #print(self.map.item(7,7))
    
    


    def run(self, rate: float = 1):
        
        while self.robot_pos is None or self.goal_pos is None:
            print("Please select a Goal")
            sleep(1)
        
        
        


        path = astar(self.map, self.robot_pos, self.goal_pos)
        #print("successfull")
        #print(path)
       
        while not rospy.is_shutdown():
            
            if self.robot_pos is None or self.goal_pos is None:
                if rate:
                    rospy.sleep(1/rate)
                continue

            if self.map.item(math.floor(self.goal_pos.x), math.floor(self.goal_pos.y)) != 0 :
                print("Can't place goal here !!!!")	  
            else:
                iterate = 1
                for i in path:
                    marker = Marker()
                    marker.header.frame_id = "map"
                    marker.ns = "goal"
                    marker.id = iterate
                    marker.type = Marker.CUBE
                    marker.action = Marker.ADD
                    marker.scale.x = 1
                    marker.scale.y = 1
                    #print(iterate)
                    if iterate == len(path):
                        marker.color.a = 1.0
                        marker.color.r = 0.0
                        marker.color.g = 0.0
                        marker.color.b = 1.0
                    else:
                        marker.color.a = 1.0
                        marker.color.r = 1.0
                        marker.color.g = 0.0
                        marker.color.b = 0.0	
                    marker.pose.orientation.w = 1.0
                    marker.lifetime = rospy.Duration(50)
                    iterate = iterate + 1
                        # ADD 0.5 to the marker in order to present the goal position
                        #marker.pose.position.x = 0.5 + math.floor(self.goal_pos.x)
                        #marker.pose.position.y = 0.5 + math.floor(self.goal_pos.y)

                        #Removed to allow for better looking blocks and goal is selected from the path
                    marker.pose.position.x = i.x + 0.5
                    marker.pose.position.y = i.y + 0.5
                    self.pub_marker.publish(marker) 

                
	     
            if rate:
                rospy.sleep(1/rate)


########################### CLASS FOR NODES AND ASTAR ###############################################


class Node():


    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = Point()

        self.position = position

        self.g = 0
        self.h = 0
        self.f = 0
        #print(self.position)

    def __eq__(self, other):
        return self.position == other.position


    def __repr__(self):
        return f"{self.position} - g: {self.g} h: {self.h} f: {self.f}"
      
      
    # found a really cool implementation that uses a heap, otherwise i would've used a prio queue  
    def __lt__(self, other):
        return self.f < other.f
    
    
    def __gt__(self, other):
        return self.f > other.f
        
def return_path(current_node):
    path = []
    current = current_node
    while current is not None:
        path.append(current.position)
        current = current.parent
    return path[::-1]  # Return path but the other way around 
       
def astar(map, start, end):

    start_node = Node(None, start)
    #print(start_node)
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, end)
    #print(end_node)
    end_node.g = end_node.h = end_node.f = 0
    open_list = []
    closed_list = []

    heapq.heapify(open_list) 	
    heapq.heappush(open_list, start_node)
        
    adjacent_squares = ((0, -1), (0, 1), (-1, 0), (1, 0),)
    while len(open_list) > 0:
        
        current_node = heapq.heappop(open_list)
        closed_list.append(current_node)
        
        if current_node == end_node:
            return return_path(current_node)


	# Here we create all the children nodes representing all the neighboring squares and choosing optimal path
        children = []
        for new_position in adjacent_squares:
            node_position = Point()
            node_position.y = current_node.position.y + new_position[1]
            node_position.x = current_node.position.x + new_position[0]

            if node_position.x > 19 or node_position.x < 0 or node_position.y > 19  or node_position.y < 0:
                continue
            
            if map.item(math.floor(node_position.x), math.floor(node_position.y)) != 0:
                continue
                
            new_node = Node(current_node, node_position)
            children.append(new_node)
            
        for child in children:
            # Child is on the closed list
            if len([closed_child for closed_child in closed_list if closed_child == child]) > 0:
                continue

            # Create the f, g, and h values
            child.g = current_node.g + 1
            child.h = ((child.position.x - end_node.position.x) ** 2) + ((child.position.y - end_node.position.y) ** 2)
            child.f = child.g + child.h
            # Child is already in the open list
            if len([open_node for open_node in open_list if child.position == open_node.position and child.g > open_node.g]) > 0:
                continue

            # Add the child to the open list
            heapq.heappush(open_list, child)

    return None





        
            

if __name__ == "__main__":
    rospy.init_node('A_Star_Node')
    a_star_node = AStarSolver()
    a_star_node.run(rate=1)
